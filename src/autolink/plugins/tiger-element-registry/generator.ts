/**
 * Code generator for element registry
 */

import type { WebElement, WebNativeModule } from "./types";

/**
 * Generate TypeScript element and module registry code
 */
export function generateElementRegistry(
  elements: WebElement[],
  modules: WebNativeModule[]
): string {
  if (elements.length === 0 && modules.length === 0) {
    return `// No LynxJS elements or modules found
// This file is auto-generated by Tiger Element Registry Plugin

export function registerLynxExtensions() {
  // No extensions to register
}

export const registeredElements: string[] = [];
export const registeredModules: string[] = [];
`;
  }

  // Import from package web export - the package should export web implementations
  const elementImports = elements
    .map(
      (el, index) =>
        `import { ${el.className} as Element${index} } from '${el.packageName}/web';`
    )
    .join("\n");

  const moduleImports = modules
    .map(
      (mod, index) =>
        `import { ${mod.className} as Module${index} } from '${mod.packageName}/web';`
    )
    .join("\n");

  const elementRegistrations = elements
    .map(
      (el, index) =>
        `  customElements.define('${el.tagName}', Element${index});`
    )
    .join("\n");

  const moduleRegistrations = modules
    .map(
      (mod, index) =>
        `  (window as any).NativeModules = (window as any).NativeModules || {};\n  (window as any).NativeModules.${mod.moduleName} = new Module${index}();`
    )
    .join("\n");

  const elementList = elements.map((el) => `  '${el.tagName}'`).join(",\n");
  const moduleList = modules.map((mod) => `  '${mod.moduleName}'`).join(",\n");

  const imports = [elementImports, moduleImports].filter(Boolean).join("\n");
  const registrations = [elementRegistrations, moduleRegistrations]
    .filter(Boolean)
    .join("\n");

  return `// Auto-generated by Tiger Element Registry Plugin
// DO NOT EDIT - This file is regenerated on each build

${imports}

/**
 * Register all LynxJS custom elements and native modules
 * This function is called automatically by the autolink system
 */
export function registerLynxExtensions() {
${registrations}
}

// Auto-register extensions when this module is imported
registerLynxExtensions();

export const registeredElements = [
${elementList || "  // No elements"}
];

export const registeredModules = [
${moduleList || "  // No modules"}
];
`;
}

/**
 * Generate a simple runtime registry that can be imported by client code
 */
export function generateRuntimeRegistry(): string {
  return `// Auto-generated by Tiger Element Registry Plugin
// This is a runtime-only module that can be safely imported in client code

// Import the actual registry to trigger element registration
import './ElementRegistry';

export const TIGER_REGISTRY_LOADED = true;
`;
}
