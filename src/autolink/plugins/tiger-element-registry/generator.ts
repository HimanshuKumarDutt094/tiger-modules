/**
 * Code generator for element registry
 */

import type { WebElement } from "./types";

/**
 * Generate TypeScript element registry code
 */
export function generateElementRegistry(elements: WebElement[]): string {
  if (elements.length === 0) {
    return `// No LynxJS elements found
// This file is auto-generated by Tiger Element Registry Plugin

export function registerLynxElements() {
  // No elements to register
}

export const registeredElements: string[] = [];
`;
  }
  
  const imports = elements.map((el, index) => 
    `import { ${el.className} as Element${index} } from '${el.packageName}';`
  ).join('\n');
  
  const registrations = elements.map((el, index) => 
    `  customElements.define('${el.tagName}', Element${index});`
  ).join('\n');
  
  const elementList = elements.map(el => `  '${el.tagName}'`).join(',\n');
  
  return `// Auto-generated by Tiger Element Registry Plugin
// DO NOT EDIT - This file is regenerated on each build

${imports}

/**
 * Register all LynxJS custom elements
 * This function is called automatically by the autolink system
 */
export function registerLynxElements() {
${registrations}
}

// Auto-register elements when this module is imported
registerLynxElements();

export const registeredElements = [
${elementList}
];
`;
}


/**
 * Generate a simple runtime registry that can be imported by client code
 */
export function generateRuntimeRegistry(): string {
  return `// Auto-generated by Tiger Element Registry Plugin
// This is a runtime-only module that can be safely imported in client code

// Import the actual registry to trigger element registration
import './ElementRegistry';

export const TIGER_REGISTRY_LOADED = true;
`;
}